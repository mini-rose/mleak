mleak
-----

Library for catching memory leaks, double-frees, invalid pointers passed to free
& realloc, counting allocations and used heap memory.

If you're profiling allocations, you may use `-DMLEAK_TRACK` to print the amount
of calls to the allocation functions, and the amount of total bytes allocated.
Note that realloc() called with NULL gets redirected to a malloc().


Usage
-----

Install the library by running ./install as root, and then include the <mleak.h>
header in your source code. Then add the following line to your buildfile:

    libs mleak


Example
-------

    #include <mleak.h>

    int main()
    {
        void *p = malloc(24);
    }


Could output:

    Memory leaked, 24 bytes allocated in int main():
    test.c
       4 | {
       5 |     void *p = malloc(24); // => 0x603000000040
       6 | }


If you called free() with a pointer from strdup or any other function that
allocates memory and is not compiled with mleak, you will get an error about
an unrecognized pointer. In order to disable this you may use unchecked_free()
instead of the regular free().
